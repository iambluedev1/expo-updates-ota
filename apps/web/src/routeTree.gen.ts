/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ChangePasswordRouteImport } from './routes/change-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizationsNewRouteImport } from './routes/organizations/new'
import { Route as OrganizationsOrgIdRouteImport } from './routes/organizations/$orgId'
import { Route as InvitationsTokenRouteImport } from './routes/invitations/$token'
import { Route as OrganizationsOrgIdIndexRouteImport } from './routes/organizations/$orgId/index'
import { Route as OrganizationsOrgIdSettingsRouteImport } from './routes/organizations/$orgId/settings'
import { Route as OrganizationsOrgIdMembersInviteRouteImport } from './routes/organizations/$orgId/members/invite'
import { Route as OrganizationsOrgIdAppsNewRouteImport } from './routes/organizations/$orgId/apps/new'
import { Route as OrganizationsOrgIdAppsAppIdRouteImport } from './routes/organizations/$orgId/apps/$appId'
import { Route as OrganizationsOrgIdAppsAppIdSettingsRouteImport } from './routes/organizations/$orgId/apps/$appId/settings'
import { Route as OrganizationsOrgIdAppsAppIdTokensNewRouteImport } from './routes/organizations/$orgId/apps/$appId/tokens/new'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangePasswordRoute = ChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsNewRoute = OrganizationsNewRouteImport.update({
  id: '/organizations/new',
  path: '/organizations/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsOrgIdRoute = OrganizationsOrgIdRouteImport.update({
  id: '/organizations/$orgId',
  path: '/organizations/$orgId',
  getParentRoute: () => rootRouteImport,
} as any)
const InvitationsTokenRoute = InvitationsTokenRouteImport.update({
  id: '/invitations/$token',
  path: '/invitations/$token',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsOrgIdIndexRoute = OrganizationsOrgIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganizationsOrgIdRoute,
} as any)
const OrganizationsOrgIdSettingsRoute =
  OrganizationsOrgIdSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrganizationsOrgIdRoute,
  } as any)
const OrganizationsOrgIdMembersInviteRoute =
  OrganizationsOrgIdMembersInviteRouteImport.update({
    id: '/members/invite',
    path: '/members/invite',
    getParentRoute: () => OrganizationsOrgIdRoute,
  } as any)
const OrganizationsOrgIdAppsNewRoute =
  OrganizationsOrgIdAppsNewRouteImport.update({
    id: '/apps/new',
    path: '/apps/new',
    getParentRoute: () => OrganizationsOrgIdRoute,
  } as any)
const OrganizationsOrgIdAppsAppIdRoute =
  OrganizationsOrgIdAppsAppIdRouteImport.update({
    id: '/apps/$appId',
    path: '/apps/$appId',
    getParentRoute: () => OrganizationsOrgIdRoute,
  } as any)
const OrganizationsOrgIdAppsAppIdSettingsRoute =
  OrganizationsOrgIdAppsAppIdSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrganizationsOrgIdAppsAppIdRoute,
  } as any)
const OrganizationsOrgIdAppsAppIdTokensNewRoute =
  OrganizationsOrgIdAppsAppIdTokensNewRouteImport.update({
    id: '/tokens/new',
    path: '/tokens/new',
    getParentRoute: () => OrganizationsOrgIdAppsAppIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/invitations/$token': typeof InvitationsTokenRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteWithChildren
  '/organizations/new': typeof OrganizationsNewRoute
  '/organizations/$orgId/settings': typeof OrganizationsOrgIdSettingsRoute
  '/organizations/$orgId/': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/apps/$appId': typeof OrganizationsOrgIdAppsAppIdRouteWithChildren
  '/organizations/$orgId/apps/new': typeof OrganizationsOrgIdAppsNewRoute
  '/organizations/$orgId/members/invite': typeof OrganizationsOrgIdMembersInviteRoute
  '/organizations/$orgId/apps/$appId/settings': typeof OrganizationsOrgIdAppsAppIdSettingsRoute
  '/organizations/$orgId/apps/$appId/tokens/new': typeof OrganizationsOrgIdAppsAppIdTokensNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/invitations/$token': typeof InvitationsTokenRoute
  '/organizations/new': typeof OrganizationsNewRoute
  '/organizations/$orgId/settings': typeof OrganizationsOrgIdSettingsRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/apps/$appId': typeof OrganizationsOrgIdAppsAppIdRouteWithChildren
  '/organizations/$orgId/apps/new': typeof OrganizationsOrgIdAppsNewRoute
  '/organizations/$orgId/members/invite': typeof OrganizationsOrgIdMembersInviteRoute
  '/organizations/$orgId/apps/$appId/settings': typeof OrganizationsOrgIdAppsAppIdSettingsRoute
  '/organizations/$orgId/apps/$appId/tokens/new': typeof OrganizationsOrgIdAppsAppIdTokensNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/invitations/$token': typeof InvitationsTokenRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteWithChildren
  '/organizations/new': typeof OrganizationsNewRoute
  '/organizations/$orgId/settings': typeof OrganizationsOrgIdSettingsRoute
  '/organizations/$orgId/': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/apps/$appId': typeof OrganizationsOrgIdAppsAppIdRouteWithChildren
  '/organizations/$orgId/apps/new': typeof OrganizationsOrgIdAppsNewRoute
  '/organizations/$orgId/members/invite': typeof OrganizationsOrgIdMembersInviteRoute
  '/organizations/$orgId/apps/$appId/settings': typeof OrganizationsOrgIdAppsAppIdSettingsRoute
  '/organizations/$orgId/apps/$appId/tokens/new': typeof OrganizationsOrgIdAppsAppIdTokensNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/change-password'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/invitations/$token'
    | '/organizations/$orgId'
    | '/organizations/new'
    | '/organizations/$orgId/settings'
    | '/organizations/$orgId/'
    | '/organizations/$orgId/apps/$appId'
    | '/organizations/$orgId/apps/new'
    | '/organizations/$orgId/members/invite'
    | '/organizations/$orgId/apps/$appId/settings'
    | '/organizations/$orgId/apps/$appId/tokens/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/change-password'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/invitations/$token'
    | '/organizations/new'
    | '/organizations/$orgId/settings'
    | '/organizations/$orgId'
    | '/organizations/$orgId/apps/$appId'
    | '/organizations/$orgId/apps/new'
    | '/organizations/$orgId/members/invite'
    | '/organizations/$orgId/apps/$appId/settings'
    | '/organizations/$orgId/apps/$appId/tokens/new'
  id:
    | '__root__'
    | '/'
    | '/change-password'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/invitations/$token'
    | '/organizations/$orgId'
    | '/organizations/new'
    | '/organizations/$orgId/settings'
    | '/organizations/$orgId/'
    | '/organizations/$orgId/apps/$appId'
    | '/organizations/$orgId/apps/new'
    | '/organizations/$orgId/members/invite'
    | '/organizations/$orgId/apps/$appId/settings'
    | '/organizations/$orgId/apps/$appId/tokens/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChangePasswordRoute: typeof ChangePasswordRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  InvitationsTokenRoute: typeof InvitationsTokenRoute
  OrganizationsOrgIdRoute: typeof OrganizationsOrgIdRouteWithChildren
  OrganizationsNewRoute: typeof OrganizationsNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/change-password': {
      id: '/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof ChangePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/new': {
      id: '/organizations/new'
      path: '/organizations/new'
      fullPath: '/organizations/new'
      preLoaderRoute: typeof OrganizationsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/$orgId': {
      id: '/organizations/$orgId'
      path: '/organizations/$orgId'
      fullPath: '/organizations/$orgId'
      preLoaderRoute: typeof OrganizationsOrgIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invitations/$token': {
      id: '/invitations/$token'
      path: '/invitations/$token'
      fullPath: '/invitations/$token'
      preLoaderRoute: typeof InvitationsTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/$orgId/': {
      id: '/organizations/$orgId/'
      path: '/'
      fullPath: '/organizations/$orgId/'
      preLoaderRoute: typeof OrganizationsOrgIdIndexRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
    '/organizations/$orgId/settings': {
      id: '/organizations/$orgId/settings'
      path: '/settings'
      fullPath: '/organizations/$orgId/settings'
      preLoaderRoute: typeof OrganizationsOrgIdSettingsRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
    '/organizations/$orgId/members/invite': {
      id: '/organizations/$orgId/members/invite'
      path: '/members/invite'
      fullPath: '/organizations/$orgId/members/invite'
      preLoaderRoute: typeof OrganizationsOrgIdMembersInviteRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
    '/organizations/$orgId/apps/new': {
      id: '/organizations/$orgId/apps/new'
      path: '/apps/new'
      fullPath: '/organizations/$orgId/apps/new'
      preLoaderRoute: typeof OrganizationsOrgIdAppsNewRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
    '/organizations/$orgId/apps/$appId': {
      id: '/organizations/$orgId/apps/$appId'
      path: '/apps/$appId'
      fullPath: '/organizations/$orgId/apps/$appId'
      preLoaderRoute: typeof OrganizationsOrgIdAppsAppIdRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
    '/organizations/$orgId/apps/$appId/settings': {
      id: '/organizations/$orgId/apps/$appId/settings'
      path: '/settings'
      fullPath: '/organizations/$orgId/apps/$appId/settings'
      preLoaderRoute: typeof OrganizationsOrgIdAppsAppIdSettingsRouteImport
      parentRoute: typeof OrganizationsOrgIdAppsAppIdRoute
    }
    '/organizations/$orgId/apps/$appId/tokens/new': {
      id: '/organizations/$orgId/apps/$appId/tokens/new'
      path: '/tokens/new'
      fullPath: '/organizations/$orgId/apps/$appId/tokens/new'
      preLoaderRoute: typeof OrganizationsOrgIdAppsAppIdTokensNewRouteImport
      parentRoute: typeof OrganizationsOrgIdAppsAppIdRoute
    }
  }
}

interface OrganizationsOrgIdAppsAppIdRouteChildren {
  OrganizationsOrgIdAppsAppIdSettingsRoute: typeof OrganizationsOrgIdAppsAppIdSettingsRoute
  OrganizationsOrgIdAppsAppIdTokensNewRoute: typeof OrganizationsOrgIdAppsAppIdTokensNewRoute
}

const OrganizationsOrgIdAppsAppIdRouteChildren: OrganizationsOrgIdAppsAppIdRouteChildren =
  {
    OrganizationsOrgIdAppsAppIdSettingsRoute:
      OrganizationsOrgIdAppsAppIdSettingsRoute,
    OrganizationsOrgIdAppsAppIdTokensNewRoute:
      OrganizationsOrgIdAppsAppIdTokensNewRoute,
  }

const OrganizationsOrgIdAppsAppIdRouteWithChildren =
  OrganizationsOrgIdAppsAppIdRoute._addFileChildren(
    OrganizationsOrgIdAppsAppIdRouteChildren,
  )

interface OrganizationsOrgIdRouteChildren {
  OrganizationsOrgIdSettingsRoute: typeof OrganizationsOrgIdSettingsRoute
  OrganizationsOrgIdIndexRoute: typeof OrganizationsOrgIdIndexRoute
  OrganizationsOrgIdAppsAppIdRoute: typeof OrganizationsOrgIdAppsAppIdRouteWithChildren
  OrganizationsOrgIdAppsNewRoute: typeof OrganizationsOrgIdAppsNewRoute
  OrganizationsOrgIdMembersInviteRoute: typeof OrganizationsOrgIdMembersInviteRoute
}

const OrganizationsOrgIdRouteChildren: OrganizationsOrgIdRouteChildren = {
  OrganizationsOrgIdSettingsRoute: OrganizationsOrgIdSettingsRoute,
  OrganizationsOrgIdIndexRoute: OrganizationsOrgIdIndexRoute,
  OrganizationsOrgIdAppsAppIdRoute:
    OrganizationsOrgIdAppsAppIdRouteWithChildren,
  OrganizationsOrgIdAppsNewRoute: OrganizationsOrgIdAppsNewRoute,
  OrganizationsOrgIdMembersInviteRoute: OrganizationsOrgIdMembersInviteRoute,
}

const OrganizationsOrgIdRouteWithChildren =
  OrganizationsOrgIdRoute._addFileChildren(OrganizationsOrgIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChangePasswordRoute: ChangePasswordRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  InvitationsTokenRoute: InvitationsTokenRoute,
  OrganizationsOrgIdRoute: OrganizationsOrgIdRouteWithChildren,
  OrganizationsNewRoute: OrganizationsNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
